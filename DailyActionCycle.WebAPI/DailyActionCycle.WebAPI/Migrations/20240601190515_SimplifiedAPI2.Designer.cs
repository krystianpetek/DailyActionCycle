// <auto-generated />
using System;
using DailyActionCycle.WebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DailyActionCycle.WebAPI.Migrations
{
    [DbContext(typeof(DailyActionCycleDbContext))]
    [Migration("20240601190515_SimplifiedAPI2")]
    partial class SimplifiedAPI2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActivityDay", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<string>("DayDate")
                        .HasColumnType("text");

                    b.HasKey("ActivitiesId", "DayDate");

                    b.HasIndex("DayDate");

                    b.ToTable("ActivityDay");
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.ActionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActionTemplates");
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActionTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionTemplateId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.Day", b =>
                {
                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<Guid?>("ActionTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("Date");

                    b.HasIndex("ActionTemplateId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("ActivityDay", b =>
                {
                    b.HasOne("DailyActionCycle.WebAPI.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyActionCycle.WebAPI.Entities.Day", null)
                        .WithMany()
                        .HasForeignKey("DayDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.Activity", b =>
                {
                    b.HasOne("DailyActionCycle.WebAPI.Entities.ActionTemplate", null)
                        .WithMany("Activities")
                        .HasForeignKey("ActionTemplateId");
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.Day", b =>
                {
                    b.HasOne("DailyActionCycle.WebAPI.Entities.ActionTemplate", "ActionTemplate")
                        .WithMany()
                        .HasForeignKey("ActionTemplateId");

                    b.Navigation("ActionTemplate");
                });

            modelBuilder.Entity("DailyActionCycle.WebAPI.Entities.ActionTemplate", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
