// <auto-generated />
using System;
using DailyActionCycle.WebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DailyActionCycle.WebAPI.Migrations
{
    [DbContext(typeof(DailyActionCycleDbContext))]
    [Migration("20240504172706_addedNameToActionTemplate")]
    partial class addedNameToActionTemplate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Abstracts.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DayDate")
                        .HasColumnType("text");

                    b.Property<string>("DayDate1")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DayDate");

                    b.HasIndex("DayDate1");

                    b.ToTable("Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.ActionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActionTemplates");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Day", b =>
                {
                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.HasKey("Date");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Habit", b =>
                {
                    b.HasBaseType("DailyActionCycle.Core.Entities.Abstracts.Entity");

                    b.Property<Guid?>("ActionTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Daily")
                        .HasColumnType("boolean");

                    b.Property<bool>("Weekly")
                        .HasColumnType("boolean");

                    b.HasIndex("ActionTemplateId");

                    b.HasDiscriminator().HasValue("Habit");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.ToDo", b =>
                {
                    b.HasBaseType("DailyActionCycle.Core.Entities.Abstracts.Entity");

                    b.Property<Guid?>("ActionTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ActionTemplateId");

                    b.ToTable("Entity", t =>
                        {
                            t.Property("ActionTemplateId")
                                .HasColumnName("ToDo_ActionTemplateId");
                        });

                    b.HasDiscriminator().HasValue("ToDo");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Abstracts.Entity", b =>
                {
                    b.HasOne("DailyActionCycle.Core.Entities.Day", null)
                        .WithMany("Habits")
                        .HasForeignKey("DayDate")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DailyActionCycle.Core.Entities.Day", null)
                        .WithMany("Tasks")
                        .HasForeignKey("DayDate1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Habit", b =>
                {
                    b.HasOne("DailyActionCycle.Core.Entities.ActionTemplate", null)
                        .WithMany("Habits")
                        .HasForeignKey("ActionTemplateId");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.ToDo", b =>
                {
                    b.HasOne("DailyActionCycle.Core.Entities.ActionTemplate", null)
                        .WithMany("ToDos")
                        .HasForeignKey("ActionTemplateId");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.ActionTemplate", b =>
                {
                    b.Navigation("Habits");

                    b.Navigation("ToDos");
                });

            modelBuilder.Entity("DailyActionCycle.Core.Entities.Day", b =>
                {
                    b.Navigation("Habits");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
