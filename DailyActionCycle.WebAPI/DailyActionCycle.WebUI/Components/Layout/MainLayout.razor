@using DailyActionCycle.WebUI.Services
@using DailyActionCycle.WebUI.Components.Layout
﻿
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject CurrentRouteService CurrentRouteService

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        
        <span>@CurrentRouteService.CurrentRoute</span>
        
        @* <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" /> *@
        @* <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/arbems/.NET-MAUI-Blazor-Hybrid-app-with-MudBlazor" Target="_blank" /> *@
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MyApplication</MudText>
        </MudDrawerHeader>
        <NavMenu />
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
    </MudDrawer>

    <MudSwipeArea OnSwipe="@OnSwipe">

        <MudContainer Style="margin:0; padding:0;" MaxWidth="MaxWidth.Large">
            <BottomNavBar>
                <MudMainContent>
                    @Body
                </MudMainContent>
            </BottomNavBar>
        </MudContainer>

    </MudSwipeArea>

</MudLayout>

@code {
    bool _drawerOpen = true;

    string title = "DailyActionCycle";

    private MudTheme _theme = new();
    private bool _isDarkMode = true;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && !_drawerOpen)
        {
            _drawerOpen = true;
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void NavigateTo(string route)
    {
        NavigationManager.NavigateTo(route);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("MudAppBar initialized");
        CurrentRouteService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CurrentRouteService.OnChange -= StateHasChanged;
    }
}